{"version":3,"sources":["MusicMap.js","About.js","App.js","index.js"],"names":["MusicMap","props","data","audioPlayerUrl","togglePlay","useState","tooltipContent","setTooltipContent","slice","cells","CustomTooltip","active","payload","label","length","className","printReadableString","i","push","Cell","onMouseOver","genre","onClick","onTouchStart","fill","color","stroke","strokeWidth","preview_url","ScatterChart","width","height","margin","top","right","bottom","left","CartesianGrid","vertical","horizontal","XAxis","hide","type","dataKey","YAxis","content","Scatter","name","str","split","map","word","toUpperCase","substring","join","About","setAboutToggle","e","target","href","App","audioPlayer","useRef","aboutToggle","audioPlayerKey","setAudioPlayerKey","setAudioPlayerUrl","audioPlayerGenre","setAudioPlayerGenre","isPlaying","setIsPlaying","onShuffle","setOnShuffle","initialData","setData","url","current","pause","play","useEffect","getNewMusicMap","Tooltip","title","IconButton","preventDefault","style","fontSize","AudioPlayer","ref","checkOnShuffle","Math","floor","random","marginTop","window","open","replace","currentTime","forwardRef","navigator","maxTouchPoints","msMaxTouchPoints","volume","controls","onEnded","src","arr","n","result","Array","len","taken","RangeError","x","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7031efe5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  ScatterChart,\n  Scatter,\n  Cell,\n  Tooltip,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { MapInteractionCSS } from \"react-map-interaction\";\n\nconst NODES_ON_MAP = 400;\n\nexport default function MusicMap(props) {\n  let { data, audioPlayerUrl, togglePlay } = props;\n  const [tooltipContent, setTooltipContent] = useState(\"\");\n\n  data = data.slice(0, NODES_ON_MAP);\n  let cells = [];\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"custom-tooltip\">\n          {printReadableString(tooltipContent)}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  for (let i = 0; i < data.length; i++) {\n    cells.push(\n      <Cell\n        onMouseOver={() => setTooltipContent(data[i].genre)}\n        onClick={() => togglePlay(i)}\n        onTouchStart={() => togglePlay(i)}\n        key={`cell-${data[i].genre}`}\n        fill={data[i].color}\n        stroke={data[i].color}\n        strokeWidth={\n          audioPlayerUrl ===\n          `https://p.scdn.co/mp3-preview/${data[i].preview_url}`\n            ? 25\n            : 8\n        }\n      />\n    );\n  }\n\n  return (\n    <MapInteractionCSS>\n      <ScatterChart\n        width={2200}\n        height={1400}\n        margin={{\n          top: 20,\n          right: 20,\n          bottom: 20,\n          left: 20,\n        }}\n      >\n        <CartesianGrid vertical={false} horizontal={false} />\n        <XAxis hide={true} type=\"number\" dataKey=\"left\" />\n        <YAxis hide={true} type=\"number\" dataKey=\"top\" />\n        <Tooltip content={<CustomTooltip />} />\n        <Scatter name=\"data\" data={data} fill=\"#8884d8\">\n          {cells}\n        </Scatter>\n      </ScatterChart>\n    </MapInteractionCSS>\n  );\n}\n\nfunction printReadableString(str) {\n  if (str === \"\") {\n    return \"\";\n  }\n  const words = str.split(\" \");\n  const result = words\n    .map((word) => {\n      return word[0].toUpperCase() + word.substring(1);\n    })\n    .join(\" \");\n\n  return result;\n}\n","export default function About(props) {\n  const { setAboutToggle } = props;\n  return (\n    <div>\n      <div className=\"about-background\" />\n      <div\n        className=\"about\"\n        onClick={(e) => {\n          if (!e.target.href) {\n            setAboutToggle(false);\n          }\n        }}\n      >\n        <div className=\"font-size-64\">MusicMap</div>\n        <div>by Vincent Tieu</div>\n        <br />\n        <a href=\"https://github.com/vincentktieu101/MusicMap\" target=\"_blank\">\n          https://github.com/vincentktieu101/MusicMap\n        </a>\n        <div className=\"width-500-less\">\n          <br />\n          <br />\n          <br />\n          <div>\n            MusicMap is a visual way to explore 5000+ genres! Scroll to zoom and\n            click to drag across the map. Once you're ready, select a genre and\n            listen to a 30 second sample. Refreshing the map repicks 400 genres\n            of the 5000+. Shuffle queues a random song for as long as it's\n            toggled.\n          </div>\n          <br />\n          <br />\n          <div>\n            Generally, the type of genres are organized by color and location.\n            Blue genres are typically instrumentals. Pink genres describe\n            electronic music/EDM. Orange genres are mainly rock. Red genres are\n            metal. Green and Yellow genres describe everything from indie to\n            pop. Genres closer together sound similar while genres further away\n            sound less similar.\n          </div>\n          <br />\n          <br />\n          <div>\n            When you find a genre you really like, you can lookup \"The Sound of\n            {\" <insert-genre-here>\"} on Spotify, where there's an awesome\n            playlist ready for you. To listen to all the genres at once, click{\" \"}\n            <a\n              href=\"https://open.spotify.com/playlist/69fEt9DN5r4JQATi52sRtq\"\n              target=\"_blank\"\n            >\n              here.\n            </a>\n          </div>\n          <br />\n          <br />\n          <div>\n            MusicMap is built in ReactJS, Material-UI, Recharts, and\n            React-Map-Interaction. The data was gathered by using a scrapping\n            tool on{\" \"}\n            <a href=\"https://everynoise.com/\" target=\"_blank\">\n              https://everynoise.com/.\n            </a>{\" \"}\n            This app was designed primarily for desktop but also works well on\n            mobile :)\n          </div>\n          <br />\n          <br />\n          <br />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useRef, forwardRef } from \"react\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport MenuBookIcon from \"@material-ui/icons/MenuBook\";\nimport RepeatIcon from \"@material-ui/icons/Repeat\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FastForwardIcon from \"@material-ui/icons/FastForward\";\n\nimport MusicMap from \"./MusicMap\";\nimport About from \"./About\";\nimport initialData from \"./scrapes/db.json\";\n\nconst NODES_ON_MAP = 400;\n\nexport default function App() {\n  const audioPlayer = useRef();\n  const [aboutToggle, setAboutToggle] = useState(false);\n  const [audioPlayerKey, setAudioPlayerKey] = useState(0);\n  const [audioPlayerUrl, setAudioPlayerUrl] = useState(\"\");\n  const [audioPlayerGenre, setAudioPlayerGenre] = useState(\"\");\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [onShuffle, setOnShuffle] = useState(false);\n  const [data, setData] = useState(initialData);\n\n  useEffect(() => {\n    setData(getNewMusicMap(initialData));\n  }, []);\n\n  function togglePlay(i) {\n    const url = data[i].preview_url;\n    const genre = data[i].genre;\n    if (audioPlayerUrl === `https://p.scdn.co/mp3-preview/${url}`) {\n      if (isPlaying) {\n        audioPlayer.current.pause();\n      } else {\n        audioPlayer.current.play();\n      }\n      setIsPlaying(!isPlaying);\n    } else {\n      setAudioPlayerUrl(`https://p.scdn.co/mp3-preview/${url}`);\n      setAudioPlayerKey(audioPlayerKey + 1);\n      setIsPlaying(true);\n      setAudioPlayerGenre(genre);\n    }\n  }\n\n  function checkOnShuffle() {\n    if (onShuffle) {\n      const i = Math.floor(Math.random() * NODES_ON_MAP);\n      togglePlay(i);\n    }\n  }\n\n  return (\n    <div>\n      {aboutToggle && <About setAboutToggle={setAboutToggle} />}\n      {!aboutToggle && (\n        <div className=\"brand\">\n          <div className=\"app-title\">\n            MusicMap\n            <Tooltip\n              title={<div className=\"custom-tooltip-black\">Refresh Map</div>}\n            >\n              <IconButton\n                onClick={(e) => {\n                  e.preventDefault();\n                  setData(getNewMusicMap(initialData));\n                }}\n              >\n                <RefreshIcon style={{ color: \"white\" }} />\n              </IconButton>\n            </Tooltip>\n          </div>\n          by Vincent Tieu\n          <Tooltip\n            title={<div className=\"custom-tooltip-black\">Read Details</div>}\n          >\n            <IconButton\n              onClick={(e) => {\n                e.preventDefault();\n                setAboutToggle(!aboutToggle);\n              }}\n            >\n              <MenuBookIcon fontSize=\"small\" style={{ color: \"white\" }} />\n            </IconButton>\n          </Tooltip>\n        </div>\n      )}\n      <div className={aboutToggle ? \"audio-player hidden\" : \"audio-player\"}>\n        {audioPlayerGenre !== \"\" ? (\n          <div>\n            <div>Genre Playing: {printReadableString(audioPlayerGenre)}</div>\n            <br />\n            <AudioPlayer\n              ref={audioPlayer}\n              audioPlayerKey={audioPlayerKey}\n              audioPlayerGenre={audioPlayerGenre}\n              audioPlayerUrl={audioPlayerUrl}\n              onShuffle={onShuffle}\n              checkOnShuffle={checkOnShuffle}\n            />\n            <br />\n            <div>\n              <Tooltip\n                title={\n                  <div className=\"custom-tooltip-black\">\n                    Search for Playlist on Spotify\n                  </div>\n                }\n                style={{ marginTop: \"3px\" }}\n              >\n                <IconButton\n                  onClick={(e) => {\n                    e.preventDefault();\n                    window.open(\n                      `https://open.spotify.com/search/the%20sound%20of%20${audioPlayerGenre.replace(\n                        / /g,\n                        \"%20\"\n                      )}`,\n                      \"_blank\" // <- This is what makes it open in a new window.\n                    );\n                  }}\n                >\n                  <SearchIcon style={{ color: \"white\" }} />\n                </IconButton>\n              </Tooltip>\n              <Tooltip\n                title={<div className=\"custom-tooltip-black\">Shuffle</div>}\n              >\n                <IconButton\n                  onClick={(e) => {\n                    e.preventDefault();\n                    if (!onShuffle) {\n                      const i = Math.floor(Math.random() * NODES_ON_MAP);\n                      togglePlay(i);\n                    }\n                    setOnShuffle(!onShuffle);\n                  }}\n                >\n                  {onShuffle ? (\n                    <RepeatIcon style={{ color: \"green\" }} />\n                  ) : (\n                    <RepeatIcon style={{ color: \"white\" }} />\n                  )}\n                </IconButton>\n              </Tooltip>\n              <Tooltip\n                title={<div className=\"custom-tooltip-black\">Forward</div>}\n              >\n                <IconButton\n                  onClick={(e) => {\n                    e.preventDefault();\n                    audioPlayer.current.currentTime = 30;\n                  }}\n                >\n                  <FastForwardIcon style={{ color: \"white\" }} />\n                </IconButton>\n              </Tooltip>\n            </div>\n          </div>\n        ) : (\n          <div>Drag to Navigate and Click to Listen!</div>\n        )}\n      </div>\n      <MusicMap\n        data={data}\n        audioPlayerUrl={audioPlayerUrl}\n        togglePlay={togglePlay}\n      />\n    </div>\n  );\n}\n\nconst AudioPlayer = forwardRef((props, ref) => {\n  const {\n    audioPlayerKey,\n    audioPlayerGenre,\n    audioPlayerUrl,\n    onShuffle,\n    checkOnShuffle,\n  } = props;\n  useEffect(() => {\n    if (ref) {\n      if (!isTouchDevice() || onShuffle) {\n        ref.current.play();\n      }\n      ref.current.volume = 0.15;\n    }\n  }, [ref, audioPlayerGenre]);\n\n  return (\n    <audio ref={ref} key={audioPlayerKey} controls onEnded={checkOnShuffle}>\n      <source src={audioPlayerUrl} />\n    </audio>\n  );\n});\n\nfunction getNewMusicMap(arr) {\n  var n = NODES_ON_MAP,\n    result = new Array(n),\n    len = arr.length,\n    taken = new Array(len);\n  if (n > len)\n    throw new RangeError(\"getRandom: more elements taken than available\");\n  while (n--) {\n    var x = Math.floor(Math.random() * len);\n    result[n] = arr[x in taken ? taken[x] : x];\n    taken[x] = --len in taken ? taken[len] : len;\n  }\n  return result;\n}\n\nfunction printReadableString(str) {\n  const words = str.split(\" \");\n  const result = words\n    .map((word) => {\n      return word[0].toUpperCase() + word.substring(1);\n    })\n    .join(\" \");\n\n  return result;\n}\n\nfunction isTouchDevice() {\n  return (\n    \"ontouchstart\" in window ||\n    navigator.maxTouchPoints > 0 ||\n    navigator.msMaxTouchPoints > 0\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}