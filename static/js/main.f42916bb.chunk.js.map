{"version":3,"sources":["utils.js","components/About.js","components/MainMenu.js","components/AudioPlayerMenu.js","components/MusicMap.js","components/SearchBar.js","App.js","index.js"],"names":["reduceNList","arr","n","result","Array","len","length","taken","RangeError","x","Math","floor","random","printReadableString","str","split","map","word","toUpperCase","substring","join","About","props","setAboutToggle","background","useRef","className","onClick","e","target","current","ref","href","rel","MainMenu","refreshMap","Tooltip","title","IconButton","preventDefault","style","color","fontSize","AudioPlayerMenu","activeGenreData","audioPlayer","shuffle","skip","renderedAudioPlayer","setSearchToggle","beastModeToggle","genre","beastMode","window","open","replace","isShuffle","MusicMap","triggerAudioPlayer","NGenresList","useState","tooltipContent","setTooltipContent","cells","CustomTooltip","active","payload","label","i","push","Cell","fill","stroke","strokeWidth","onMouseOver","onTouchStart","ScatterChart","width","height","margin","top","right","bottom","left","CartesianGrid","vertical","horizontal","XAxis","hide","type","dataKey","YAxis","content","Scatter","name","data","filterOptions","createFilterOptions","limit","SearchBar","searchValue","setSearchValue","genreDict","allGenresList","key","backgroundColor","padding","marginTop","onSubmit","undefined","Autocomplete","options","getOptionLabel","option","renderOption","renderInput","params","TextField","marginRight","onKeyDown","value","App","setNGenresList","aboutToggle","searchToggle","activeUrl","preview_urls","setActiveGenreData","setAudioPlayer","absolute","newActiveGenreData","j","newAudioPlayer","paused","play","pause","triggerAudioPlayerOnEnded","useEffect","interval","setInterval","clearInterval","AudioPlayer","forwardRef","volume","controls","onEnded","src","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f42916bb.chunk.js","sourcesContent":["export function reduceNList(arr, n) {\n  var result = new Array(n),\n    len = arr.length,\n    taken = new Array(len);\n  if (n > len)\n    throw new RangeError(\"reduceNList: more elements taken than available\");\n  while (n--) {\n    var x = Math.floor(Math.random() * len);\n    result[n] = arr[x in taken ? taken[x] : x];\n    taken[x] = --len in taken ? taken[len] : len;\n  }\n  return result;\n}\n\nexport function printReadableString(str) {\n  if (str === \"\") {\n    return str;\n  }\n  const words = str.split(\" \");\n  const result = words\n    .map((word) => {\n      return word[0].toUpperCase() + word.substring(1);\n    })\n    .join(\" \");\n\n  return result;\n}\n\nexport function isTouchDevice() {\n  return (\n    \"ontouchstart\" in window ||\n    navigator.maxTouchPoints > 0 ||\n    navigator.msMaxTouchPoints > 0\n  );\n}\n","import { useRef } from \"react\";\n\nexport default function About(props) {\n  const { setAboutToggle } = props;\n  const background = useRef();\n  return (\n    <div\n      className=\"about\"\n      onClick={(e) => {\n        if (e.target === background.current) {\n          setAboutToggle(false);\n        }\n      }}\n    >\n      <div className=\"background\" ref={background} />\n      <div className=\"about-description\">\n        <div className=\"font-size-64\">MusicMap</div>\n        <div>by Vincent Tieu</div>\n        <br />\n        <a\n          href=\"https://github.com/vincentktieu101/MusicMap\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          https://github.com/vincentktieu101/MusicMap\n        </a>\n        <div className=\"width-500-less\">\n          <br />\n          <br />\n          <div>\n            MusicMap is a visual way to explore 5000+ genres and over 500,000\n            songs! Scroll to zoom and click to drag across the map. Once you're\n            ready, select a genre and listen to 30 second samples of that genre.\n          </div>\n          <br />\n          <br />\n          <div>\n            Generally, the type of genres are organized by color and location.\n            Blue genres are typically instrumentals. Pink genres describe\n            electronic music/EDM. Orange genres are mainly rock. Red genres are\n            metal. Green and Yellow genres describe everything from indie to\n            pop. Genres closer together sound similar while genres further away\n            sound less similar.\n          </div>\n          <br />\n          <br />\n          <div>\n            Other actions you can perform are to refresh the map, search for\n            genre playlist on Spotify, shuffle random genres, and skip current\n            sample. Refreshing provides 400 new genres on your map. Shuffle\n            random genre changes the genre after each sample. There are 100+\n            unique samples for each genre.\n          </div>\n          <br />\n          <br />\n          <div>\n            MusicMap is built in ReactJS, Material-UI, Recharts, and\n            React-Map-Interaction. The data was gathered by using a scrapping\n            tool on{\" \"}\n            <a href=\"https://everynoise.com/\" target=\"_blank\" rel=\"noreferrer\">\n              https://everynoise.com/.\n            </a>{\" \"}\n            This app was designed primarily for desktop but also works well on\n            mobile :)\n          </div>\n          <br />\n          <br />\n          <br />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import Tooltip from \"@material-ui/core/Tooltip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport MenuBookIcon from \"@material-ui/icons/MenuBook\";\n\nexport default function MainMenu(props) {\n  const { setAboutToggle, refreshMap } = props;\n  return (\n    <div className=\"brand\">\n      <div className=\"font-size-48\">\n        MusicMap\n        <Tooltip\n          title={<div className=\"custom-tooltip-black\">Refresh Map</div>}\n        >\n          <IconButton\n            onClick={(e) => {\n              e.preventDefault();\n              refreshMap();\n            }}\n          >\n            <RefreshIcon style={{ color: \"white\" }} />\n          </IconButton>\n        </Tooltip>\n      </div>\n      by Vincent Tieu\n      <Tooltip title={<div className=\"custom-tooltip-black\">Read Details</div>}>\n        <IconButton\n          onClick={(e) => {\n            e.preventDefault();\n            setAboutToggle(true);\n          }}\n        >\n          <MenuBookIcon fontSize=\"small\" style={{ color: \"white\" }} />\n        </IconButton>\n      </Tooltip>\n    </div>\n  );\n}\n","import Tooltip from \"@material-ui/core/Tooltip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport RepeatIcon from \"@material-ui/icons/Repeat\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FastForwardIcon from \"@material-ui/icons/FastForward\";\nimport LibraryMusicIcon from \"@material-ui/icons/LibraryMusic\";\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\n\nimport { printReadableString } from \"../utils\";\n\nexport default function AudioPlayerMenu(props) {\n  const {\n    activeGenreData,\n    audioPlayer,\n    shuffle,\n    skip,\n    renderedAudioPlayer,\n    setSearchToggle,\n    beastModeToggle,\n  } = props;\n\n  return (\n    <div>\n      {activeGenreData.genre !== \"\" ? (\n        <div>\n          <div className=\"font-size-20\">\n            Genre: {printReadableString(activeGenreData.genre)}\n          </div>\n          <br />\n          {renderedAudioPlayer}\n          <br />\n          <div>\n            <Tooltip title={<div className=\"custom-tooltip-black\">Search</div>}>\n              <IconButton\n                onClick={(e) => {\n                  e.preventDefault();\n                  setSearchToggle(true);\n                }}\n              >\n                <SearchIcon style={{ color: \"white\" }} />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title={<div className=\"custom-tooltip-black\">Beast Mode</div>}>\n              <IconButton\n                onClick={(e) => {\n                  e.preventDefault();\n                  beastModeToggle();\n                }}\n              >\n                {audioPlayer.beastMode ? <InsertEmoticonIcon style={{ color: \"green\" }}/> : <EmojiEmotionsIcon style={{ color: \"white\" }}/>}\n              </IconButton>\n            </Tooltip>\n            <Tooltip\n              title={\n                <div className=\"custom-tooltip-black\">\n                  Search for Genre Playlist on Spotify\n                </div>\n              }\n            >\n              <IconButton\n                onClick={(e) => {\n                  e.preventDefault();\n                  window.open(\n                    `https://open.spotify.com/search/the%20sound%20of%20${activeGenreData.genre.replace(\n                      / /g,\n                      \"%20\"\n                    )}`,\n                    \"_blank\" // <- This is what makes it open in a new window.\n                  );\n                }}\n              >\n                <LibraryMusicIcon style={{ color: \"white\" }} />\n              </IconButton>\n            </Tooltip>\n            <Tooltip\n              title={\n                <div className=\"custom-tooltip-black\">\n                  Shuffle Random Genres\n                </div>\n              }\n            >\n              <IconButton\n                onClick={(e) => {\n                  e.preventDefault();\n                  shuffle();\n                }}\n              >\n                {audioPlayer.isShuffle ? (\n                  <RepeatIcon style={{ color: \"green\" }} />\n                ) : (\n                  <RepeatIcon style={{ color: \"white\" }} />\n                )}\n              </IconButton>\n            </Tooltip>\n            <Tooltip\n              title={\n                <div className=\"custom-tooltip-black\">Skip Current Sample</div>\n              }\n            >\n              <IconButton\n                onClick={(e) => {\n                  e.preventDefault();\n                  skip();\n                }}\n              >\n                <FastForwardIcon style={{ color: \"white\" }} />\n              </IconButton>\n            </Tooltip>\n          </div>\n        </div>\n      ) : (\n        <div className=\"font-size-32\">\n          <div>Drag/Zoom to Navigate</div>\n          <div>Click to Listen!</div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  ScatterChart,\n  Scatter,\n  Cell,\n  Tooltip,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { MapInteractionCSS } from \"react-map-interaction\";\n\nimport { printReadableString } from \"../utils\";\n\nexport default function MusicMap(props) {\n  const { activeGenreData, triggerAudioPlayer, audioPlayer } = props;\n  let { NGenresList } = props;\n  const [tooltipContent, setTooltipContent] = useState(\"\");\n\n  let cells = [];\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length && !audioPlayer.beastMode) {\n      return (\n        <div className=\"custom-tooltip font-size-24\">\n          {`Genre: ${printReadableString(tooltipContent)}`}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  if (!audioPlayer.beastMode) {\n    for (let i = 0; i < NGenresList.length; i++) {\n      cells.push(\n        <Cell\n          onMouseOver={() => setTooltipContent(NGenresList[i].genre)}\n          onClick={() => triggerAudioPlayer(i)}\n          onTouchStart={() => triggerAudioPlayer(i)}\n          key={`cell-${NGenresList[i].genre}`}\n          fill={NGenresList[i].color}\n          stroke={NGenresList[i].color}\n          strokeWidth={activeGenreData.genre === NGenresList[i].genre ? 25 : 8}\n        />\n      );\n    }\n  } else {\n    for (let i = 0; i < NGenresList.length; i++) {\n      cells.push(\n        <Cell\n          key={`cell-${NGenresList[i].genre}`}\n          fill={NGenresList[i].color}\n          stroke={NGenresList[i].color}\n          strokeWidth={8}\n        />\n      );\n    }\n  }\n\n  return (\n    <MapInteractionCSS>\n      <ScatterChart\n        width={2200}\n        height={1400}\n        margin={{\n          top: 20,\n          right: 20,\n          bottom: 20,\n          left: 20,\n        }}\n      >\n        <CartesianGrid vertical={false} horizontal={false} />\n        <XAxis hide={true} type=\"number\" dataKey=\"left\" />\n        <YAxis hide={true} type=\"number\" dataKey=\"top\" />\n        <Tooltip content={<CustomTooltip />} />\n        <Scatter name=\"data\" data={NGenresList} fill=\"#8884d8\">\n          {cells}\n        </Scatter>\n      </ScatterChart>\n    </MapInteractionCSS>\n  );\n}\n","import React from \"react\";\nimport { useState, useRef } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { createFilterOptions } from \"@material-ui/lab/Autocomplete\";\n\nimport allGenresList from \"../everynoise/all-genres-list.json\";\n\nconst filterOptions = createFilterOptions({\n  limit: 100,\n});\n\nexport default function SearchBar(props) {\n  const { setSearchToggle, triggerAudioPlayer } = props;\n  const [searchValue, setSearchValue] = useState(\"\");\n  const background = useRef();\n\n  let genreDict = {};\n  for (let i = 0; i < allGenresList.length; i++) {\n    genreDict[allGenresList[i].genre] = allGenresList[i].key;\n  }\n\n  return (\n    <div\n      className=\"search\"\n      onClick={(e) => {\n        if (e.target === background.current) {\n          setSearchToggle(false);\n        }\n      }}\n    >\n      <div className=\"background\" ref={background} />\n      <div\n        style={{\n          backgroundColor: \"white\",\n          width: \"400px\",\n          padding: \"4px\",\n          margin: \"4px\",\n          marginTop: \"30px\"\n        }}\n      >\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            if (genreDict[searchValue] !== undefined) {\n              triggerAudioPlayer(genreDict[searchValue], true);\n            }\n          }}\n        >\n          <Autocomplete\n            filterOptions={filterOptions}\n            options={allGenresList}\n            getOptionLabel={(option) => option.genre}\n            renderOption={(option) => (\n              <div\n                style={{ width: \"100%\", height: \"100%\" }}\n                onClick={(e) => {\n                  e.preventDefault();\n                  triggerAudioPlayer(option.key, true);\n                }}\n              >\n                {option.genre}\n              </div>\n            )}\n            style={{ padding: \"4px\", margin: \"4px\" }}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                style={{\n                  backgroundColor: \"white\",\n                  marginRight: \"4px\",\n                  padding: \"4px\",\n                  fontSize: \"32px\",\n                }}\n                label=\"Genre\"\n                onKeyDown={(e) => {\n                  setSearchValue(e.target.value);\n                }}\n              />\n            )}\n          />\n        </form>\n      </div>\n    </div>\n  );\n}\n","import { useState, useEffect, useRef, forwardRef } from \"react\";\n\n// import allGenresList from \"./everynoise/db.json\";\nimport allGenresList from \"./everynoise/all-genres-list.json\";\nimport { reduceNList } from \"./utils\";\nimport About from \"./components/About\";\nimport MainMenu from \"./components/MainMenu\";\nimport AudioPlayerMenu from \"./components/AudioPlayerMenu\";\nimport MusicMap from \"./components/MusicMap\";\nimport SearchBar from \"./components/SearchBar\";\n\nexport default function App() {\n  const NODES_ON_MAP = 400;\n  const [NGenresList, setNGenresList] = useState(\n    reduceNList(allGenresList, NODES_ON_MAP)\n  );\n  const [aboutToggle, setAboutToggle] = useState(false);\n  const [searchToggle, setSearchToggle] = useState(false);\n  const [activeGenreData, setActiveGenreData] = useState({\n    key: 0,\n    genre: \"\",\n    activeUrl: \"\",\n    color: \"\",\n    top: 0,\n    left: 0,\n    preview_urls: [],\n  });\n  const [audioPlayer, setAudioPlayer] = useState({\n    ref: useRef(),\n    key: 0,\n    isShuffle: false,\n    beastMode: false,\n  });\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (audioPlayer.beastMode) {\n        refreshMap();\n      }\n    }, 1500);\n    return () => clearInterval(interval);\n  }, [audioPlayer]);\n\n  function triggerAudioPlayer(i, absolute=false) {\n    if (absolute) {\n      let newActiveGenreData = { ...allGenresList[i] };\n      let j = Math.floor(Math.random() * activeGenreData.preview_urls.length);\n      newActiveGenreData.activeUrl = `https://p.scdn.co/mp3-preview/${newActiveGenreData.preview_urls[j]}`;\n      setActiveGenreData(newActiveGenreData);\n      let newAudioPlayer = { ...audioPlayer };\n      newAudioPlayer.key += 1;\n      setAudioPlayer(newAudioPlayer);\n      return;\n    }\n    \n    if (activeGenreData.genre === NGenresList[i].genre) {\n      if (audioPlayer.ref.current.paused) {\n        audioPlayer.ref.current.play();\n      } else {\n        audioPlayer.ref.current.pause();\n      }\n    } else {\n      let newActiveGenreData = { ...NGenresList[i] };\n      let j = Math.floor(Math.random() * activeGenreData.preview_urls.length);\n      newActiveGenreData.activeUrl = `https://p.scdn.co/mp3-preview/${newActiveGenreData.preview_urls[j]}`;\n      setActiveGenreData(newActiveGenreData);\n      let newAudioPlayer = { ...audioPlayer };\n      newAudioPlayer.key += 1;\n      setAudioPlayer(newAudioPlayer);\n    }\n  }\n\n  function refreshMap() {\n    setNGenresList(reduceNList(allGenresList, NGenresList.length));\n  }\n\n  function triggerAudioPlayerOnEnded() {\n    if (audioPlayer.isShuffle) {\n      const i = Math.floor(Math.random() * NGenresList.length);\n      let newActiveGenreData = { ...NGenresList[i] };\n      let j = Math.floor(Math.random() * activeGenreData.preview_urls.length);\n      newActiveGenreData.activeUrl = `https://p.scdn.co/mp3-preview/${NGenresList[i].preview_urls[j]}`;\n      setActiveGenreData(newActiveGenreData);\n\n      let newAudioPlayer = { ...audioPlayer };\n      newAudioPlayer.key += 1;\n      setAudioPlayer(newAudioPlayer);\n    } else {\n      let newActiveGenreData = { ...activeGenreData };\n      let j = Math.floor(Math.random() * activeGenreData.preview_urls.length);\n      newActiveGenreData.activeUrl = `https://p.scdn.co/mp3-preview/${activeGenreData.preview_urls[j]}`;\n      setActiveGenreData(newActiveGenreData);\n\n      let newAudioPlayer = { ...audioPlayer };\n      newAudioPlayer.key += 1;\n      setAudioPlayer(newAudioPlayer);\n    }\n  }\n\n  function beastModeToggle() {\n    let newAudioPlayer = { ...audioPlayer };\n    newAudioPlayer.beastMode = !newAudioPlayer.beastMode;\n    setAudioPlayer(newAudioPlayer);\n  }\n\n  function shuffle() {\n    if (!audioPlayer.isShuffle) {\n      const i = Math.floor(Math.random() * NGenresList.length);\n      let newActiveGenreData = { ...NGenresList[i] };\n      let j = Math.floor(Math.random() * activeGenreData.preview_urls.length);\n      newActiveGenreData.activeUrl = `https://p.scdn.co/mp3-preview/${NGenresList[i].preview_urls[j]}`;\n      setActiveGenreData(newActiveGenreData);\n\n      let newAudioPlayer = { ...audioPlayer };\n      newAudioPlayer.key += 1;\n      newAudioPlayer.isShuffle = !newAudioPlayer.isShuffle;\n      setAudioPlayer(newAudioPlayer);\n    } else {\n      let newAudioPlayer = { ...audioPlayer };\n      newAudioPlayer.isShuffle = !newAudioPlayer.isShuffle;\n      setAudioPlayer(newAudioPlayer);\n    }\n  }\n\n  function skip() {\n    triggerAudioPlayerOnEnded();\n  }\n\n  const renderedAudioPlayer = (\n    <AudioPlayer\n      ref={audioPlayer.ref}\n      activeGenreData={activeGenreData}\n      audioPlayer={audioPlayer}\n      triggerAudioPlayerOnEnded={triggerAudioPlayerOnEnded}\n    />\n  );\n\n  return (\n    <div>\n      {aboutToggle && <About setAboutToggle={setAboutToggle} />}\n      {searchToggle && (\n        <SearchBar\n          className=\"hidden\"\n          setSearchToggle={setSearchToggle}\n          triggerAudioPlayer={triggerAudioPlayer}\n        />\n      )}\n      {!(aboutToggle || searchToggle) && (\n        <MainMenu setAboutToggle={setAboutToggle} refreshMap={refreshMap} />\n      )}\n      {/* conditional className because component should remain rendered during aboutToggle */}\n      <div\n        className={\n          aboutToggle ? \"audio-player hidden\" : \"audio-player\"\n        }\n      >\n        <AudioPlayerMenu\n          activeGenreData={activeGenreData}\n          audioPlayer={audioPlayer}\n          shuffle={shuffle}\n          skip={skip}\n          setSearchToggle={setSearchToggle}\n          beastModeToggle={beastModeToggle}\n          renderedAudioPlayer={renderedAudioPlayer}\n        />\n      </div>\n      <MusicMap\n        NGenresList={NGenresList}\n        activeGenreData={activeGenreData}\n        audioPlayer={audioPlayer}\n        triggerAudioPlayer={triggerAudioPlayer}\n      />\n    </div>\n  );\n}\n\nconst AudioPlayer = forwardRef((props, ref) => {\n  const { activeGenreData, audioPlayer, triggerAudioPlayerOnEnded } = props;\n  useEffect(() => {\n    if (ref) {\n      ref.current.volume = 0.15;\n    }\n    if (!audioPlayer.beastMode) {\n      ref.current.play();\n    }\n  }, [ref, activeGenreData, audioPlayer]);\n  return (\n    <audio\n      ref={ref}\n      key={audioPlayer.key}\n      controls\n      onEnded={triggerAudioPlayerOnEnded}\n    >\n      <source src={activeGenreData.activeUrl} />\n    </audio>\n  );\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}