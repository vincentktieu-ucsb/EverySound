{"version":3,"sources":["MusicMap.js","App.js","index.js"],"names":["MusicMap","props","data","audioPlayerUrl","togglePlay","useState","tooltipContent","setTooltipContent","slice","cells","CustomTooltip","active","payload","label","length","className","i","push","Cell","onMouseOver","genre","onClick","preview_url","onTouchStart","fill","color","stroke","strokeWidth","ScatterChart","width","height","margin","top","right","bottom","left","CartesianGrid","vertical","horizontal","XAxis","hide","type","dataKey","YAxis","content","Scatter","name","App","audioPlayer","useRef","aboutToggle","setAboutToggle","audioPlayerKey","setAudioPlayerKey","setAudioPlayerUrl","audioPlayerGenre","setAudioPlayerGenre","isPlaying","setIsPlaying","initialData","setData","useEffect","getNewMusicMap","e","preventDefault","href","style","Tooltip","title","IconButton","AudioPlayer","ref","url","current","pause","play","forwardRef","volume","controls","src","arr","n","result","Array","len","taken","RangeError","x","Math","floor","random","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4acfa98.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  ScatterChart,\n  Scatter,\n  Cell,\n  Tooltip,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { MapInteractionCSS } from \"react-map-interaction\";\n\nexport default function MusicMap(props) {\n  let { data, audioPlayerUrl, togglePlay } = props;\n  const [tooltipContent, setTooltipContent] = useState(\"\");\n\n  data = data.slice(0, 400);\n  let cells = [];\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return <div className=\"custom-tooltip\">{tooltipContent}</div>;\n    }\n    return null;\n  };\n\n  for (let i = 0; i < data.length; i++) {\n    cells.push(\n      <Cell\n        onMouseOver={() => setTooltipContent(data[i].genre)}\n        onClick={() => togglePlay(data[i].preview_url, data[i].genre)}\n        onTouchStart={() => togglePlay(data[i].preview_url, data[i].genre)}\n        key={`cell-${data[i].genre}`}\n        fill={data[i].color}\n        stroke={data[i].color}\n        strokeWidth={\n          audioPlayerUrl ===\n          `https://p.scdn.co/mp3-preview/${data[i].preview_url}`\n            ? 25\n            : 8\n        }\n      />\n    );\n  }\n\n  return (\n    <MapInteractionCSS>\n      <ScatterChart\n        width={3200}\n        height={2000}\n        margin={{\n          top: 20,\n          right: 20,\n          bottom: 20,\n          left: 20,\n        }}\n      >\n        <CartesianGrid vertical={false} horizontal={false} />\n        <XAxis hide={true} type=\"number\" dataKey=\"left\" />\n        <YAxis hide={true} type=\"number\" dataKey=\"top\" />\n        <Tooltip content={<CustomTooltip />} />\n        <Scatter name=\"data\" data={data} fill=\"#8884d8\">\n          {cells}\n        </Scatter>\n      </ScatterChart>\n    </MapInteractionCSS>\n  );\n}\n","import React, { useState, useEffect, useRef, forwardRef } from \"react\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport MusicMap from \"./MusicMap\";\nimport initialData from \"./scrapes/db.json\";\n\nexport default function App() {\n  const audioPlayer = useRef();\n  const [aboutToggle, setAboutToggle] = useState(false);\n  const [audioPlayerKey, setAudioPlayerKey] = useState(0);\n  const [audioPlayerUrl, setAudioPlayerUrl] = useState(\"\");\n  const [audioPlayerGenre, setAudioPlayerGenre] = useState(\"\");\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [data, setData] = useState(initialData);\n\n  useEffect(() => {\n    setData(getNewMusicMap(initialData));\n  }, []);\n\n  function togglePlay(url, genre) {\n    if (audioPlayerUrl === `https://p.scdn.co/mp3-preview/${url}`) {\n      if (isPlaying) {\n        audioPlayer.current.pause();\n      } else {\n        audioPlayer.current.play();\n      }\n      setIsPlaying(!isPlaying);\n    } else {\n      setAudioPlayerUrl(`https://p.scdn.co/mp3-preview/${url}`);\n      setAudioPlayerKey(audioPlayerKey + 1);\n      setIsPlaying(true);\n      setAudioPlayerGenre(genre);\n    }\n  }\n\n  return (\n    <div>\n      <div className={aboutToggle ? \"about-background\" : \"hidden\"}/>\n      <div className={aboutToggle ? \"about\" : \"hidden\"} onClick={(e) => {e.preventDefault(); setAboutToggle(!aboutToggle);}}>\n        <div className=\"font-size-64\">MusicMap</div>\n        <div>by Vincent Tieu</div>\n        <br/>\n        <a href=\"https://github.com/vincentktieu101/MusicMap\">https://github.com/vincentktieu101/MusicMap</a>\n        <br/>\n        <br/>\n        <br/>\n        <div style={{width: \"500px\"}}>\n          MusicMap is a visual way to explore 5000+ genres! Scroll to zoom and click to drag across the map. \n          Once you're ready, select a genre and listen to a 30 second sample. Refreshing the map repicks 400 genres\n          of the 5000+!\n        </div>\n        <br/>\n        <br/>\n        <div style={{width: \"500px\"}}>\n          Generally, the type of genres are organized by color and location. Blue genres are typically instrumentals. Pink genres\n          describe electronic music/EDM. Orange genres are mainly Rock 'n' Roll. Red genres are metal. \n          Green and Yellow genres describe everything from indie to pop. Genres closer together sound similar while genres\n          further away sound less similar.\n        </div>\n        <br/>\n        <br/>\n        <div style={{width: \"500px\"}}>\n          When you find a genre you really like, you can lookup \"The Sound of ______\" on\n          Spotify, where there's an awesome playlist ready for you.\n        </div>\n        <br/>\n        <br/>\n        <div style={{width: \"500px\"}}>\n          MusicMap is built in ReactJS, Recharts, and Material-UI. The data was gathered by using a scrapping tool\n          on <a href=\"https://everynoise.com/\">https://everynoise.com/.</a>\n        </div>\n      </div>\n      <div className=\"brand\">\n        <div className=\"app-title\">\n          MusicMap\n          <Tooltip title={<div className=\"custom-tooltip-black\">Refresh Map</div>}>\n            <IconButton onClick={(e) => {e.preventDefault(); setData(getNewMusicMap(initialData));}}>\n              <RefreshIcon style={{ color: \"white\" }} />\n            </IconButton>\n          </Tooltip>\n        </div>\n        by Vincent Tieu\n        <Tooltip title={<div className=\"custom-tooltip-black\">Read Details</div>}>\n          <IconButton onClick={(e) => {e.preventDefault(); setAboutToggle(!aboutToggle);}} >\n            <VisibilityIcon style={{ color: \"white\" }}/>\n          </IconButton>\n        </Tooltip>\n      </div>\n      <div className=\"audio-player\">\n        {audioPlayerGenre !== \"\" ? (\n          <AudioPlayer\n            ref={audioPlayer}\n            audioPlayerKey={audioPlayerKey}\n            audioPlayerGenre={audioPlayerGenre}\n            audioPlayerUrl={audioPlayerUrl}\n          />\n        ) : (\n          <div>Drag to Navigate and Click to Listen!</div>\n        )}\n      </div>\n      <MusicMap\n        data={data}\n        audioPlayerUrl={audioPlayerUrl}\n        togglePlay={togglePlay}\n      />\n    </div>\n  );\n}\n\nconst AudioPlayer = forwardRef((props, ref) => {\n  const { audioPlayerKey, audioPlayerGenre, audioPlayerUrl } = props;\n  useEffect(() => {\n    if (ref) {\n      ref.current.play();\n      ref.current.volume = 0.15;\n    }\n  }, [ref, audioPlayerGenre]);\n\n  return (\n    <div>\n      <div>Genre Playing: {audioPlayerGenre}</div>\n      <br />\n      <audio ref={ref} key={audioPlayerKey} controls>\n        <source src={audioPlayerUrl} />\n      </audio>\n    </div>\n  );\n});\n\nfunction getNewMusicMap(arr) {\n  var n = arr.length;\n  var result = new Array(n),\n    len = arr.length,\n    taken = new Array(len);\n  if (n > len)\n    throw new RangeError(\"getRandom: more elements taken than available\");\n  while (n--) {\n    var x = Math.floor(Math.random() * len);\n    result[n] = arr[x in taken ? taken[x] : x];\n    taken[x] = --len in taken ? taken[len] : len;\n  }\n  return result;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}