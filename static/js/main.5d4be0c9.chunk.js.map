{"version":3,"sources":["MusicMap.js","App.js","index.js"],"names":["MusicMap","props","data","audioPlayerUrl","togglePlay","useState","tooltipContent","setTooltipContent","slice","cells","CustomTooltip","active","payload","label","length","className","i","push","Cell","onMouseOver","genre","onClick","preview_url","fill","color","stroke","strokeWidth","ScatterChart","width","height","margin","top","right","bottom","left","CartesianGrid","vertical","horizontal","XAxis","hide","type","dataKey","YAxis","Tooltip","content","Scatter","name","App","audioPlayer","useRef","audioPlayerKey","setAudioPlayerKey","setAudioPlayerUrl","audioPlayerGenre","setAudioPlayerGenre","isPlaying","setIsPlaying","initialData","setData","useEffect","getNewMusicMap","IconButton","style","url","current","pause","play","AudioPlayer","ref","forwardRef","console","log","volume","controls","src","arr","result","Array","n","len","taken","RangeError","x","Math","floor","random","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d4be0c9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  ScatterChart,\n  Scatter,\n  Cell,\n  Tooltip,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { MapInteractionCSS } from \"react-map-interaction\";\n\nexport default function MusicMap(props) {\n  let { data, audioPlayerUrl, togglePlay } = props;\n  const [tooltipContent, setTooltipContent] = useState(\"\");\n\n  data = data.slice(0, 400);\n  let cells = [];\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return <div className=\"custom-tooltip\">{tooltipContent}</div>;\n    }\n    return null;\n  };\n\n  for (let i = 0; i < data.length; i++) {\n    cells.push(\n      <Cell\n        onMouseOver={() => setTooltipContent(data[i].genre)}\n        onClick={() => togglePlay(data[i].preview_url, data[i].genre)}\n        key={`cell-${data[i].genre}`}\n        fill={data[i].color}\n        stroke={data[i].color}\n        strokeWidth={\n          audioPlayerUrl ===\n          `https://p.scdn.co/mp3-preview/${data[i].preview_url}`\n            ? 25\n            : 0\n        }\n      />\n    );\n  }\n\n  return (\n    <MapInteractionCSS>\n      <ScatterChart\n        width={2400}\n        height={2400}\n        margin={{\n          top: 20,\n          right: 20,\n          bottom: 20,\n          left: 20,\n        }}\n      >\n        <CartesianGrid vertical={false} horizontal={false} />\n        <XAxis hide={true} type=\"number\" dataKey=\"left\" />\n        <YAxis hide={true} type=\"number\" dataKey=\"top\" />\n        <Tooltip content={<CustomTooltip />} />\n        <Scatter name=\"data\" data={data} fill=\"#8884d8\">\n          {cells}\n        </Scatter>\n      </ScatterChart>\n    </MapInteractionCSS>\n  );\n}\n","import React, { useState, useEffect, useRef, forwardRef } from \"react\";\nimport MusicMap from \"./MusicMap\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport initialData from \"./scrapes/db.json\";\n\nexport default function App() {\n  const audioPlayer = useRef();\n  const [audioPlayerKey, setAudioPlayerKey] = useState(0);\n  const [audioPlayerUrl, setAudioPlayerUrl] = useState(\"\");\n  const [audioPlayerGenre, setAudioPlayerGenre] = useState(\"\");\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [data, setData] = useState(initialData);\n\n  useEffect(() => {\n    setData(getNewMusicMap(initialData));\n  }, []);\n\n  function togglePlay(url, genre) {\n    if (audioPlayerUrl === `https://p.scdn.co/mp3-preview/${url}`) {\n      if (isPlaying) {\n        audioPlayer.current.pause();\n      } else {\n        audioPlayer.current.play();\n      }\n      setIsPlaying(!isPlaying);\n    } else {\n      setAudioPlayerUrl(`https://p.scdn.co/mp3-preview/${url}`);\n      setAudioPlayerKey(audioPlayerKey + 1);\n      setIsPlaying(true);\n      setAudioPlayerGenre(genre);\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"brand\">\n        <div className=\"app-title\">\n          MusicMap\n          <IconButton onClick={() => setData(getNewMusicMap(initialData))}>\n            <RefreshIcon style={{ color: \"white\" }} />\n          </IconButton>\n        </div>\n        <div>by Vincent Tieu</div>\n      </div>\n      <MusicMap\n        data={data}\n        audioPlayerUrl={audioPlayerUrl}\n        togglePlay={togglePlay}\n      />\n      <div className=\"audio-player\">\n        {audioPlayerGenre !== \"\" ? (\n          <AudioPlayer\n            ref={audioPlayer}\n            audioPlayerKey={audioPlayerKey}\n            audioPlayerGenre={audioPlayerGenre}\n            audioPlayerUrl={audioPlayerUrl}\n          />\n        ) : (\n          <div>Drag to Navigate and Click to Listen!</div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst AudioPlayer = forwardRef((props, ref) => {\n  const { audioPlayerKey, audioPlayerGenre, audioPlayerUrl } = props;\n  useEffect(() => {\n    if (ref) {\n      console.log(`genre: ${audioPlayerGenre}`);\n      ref.current.play();\n      ref.current.volume = 0.15;\n    }\n  }, [ref, audioPlayerGenre]);\n\n  return (\n    <div>\n      <div>Genre Playing: {audioPlayerGenre}</div>\n      <br />\n      <audio ref={ref} key={audioPlayerKey} controls>\n        <source src={audioPlayerUrl} />\n      </audio>\n    </div>\n  );\n});\n\nfunction getNewMusicMap(arr) {\n  var result = new Array(n),\n    len = arr.length,\n    taken = new Array(len),\n    n = arr.length;\n  if (n > len)\n    throw new RangeError(\"getRandom: more elements taken than available\");\n  while (n--) {\n    var x = Math.floor(Math.random() * len);\n    result[n] = arr[x in taken ? taken[x] : x];\n    taken[x] = --len in taken ? taken[len] : len;\n  }\n  return result;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}