{"version":3,"sources":["GenreScatterChart.js","App.js","index.js"],"names":["GenreScatterChart","audioPlayer","useRef","useState","audioPlayerKey","setAudioPlayerKey","audioPlayerUrl","setAudioPlayerUrl","audioPlayerGenre","setAudioPlayerGenre","tooltipContent","setTooltipContent","isPlaying","keys","Object","genre_data","data","values","CustomTooltip","active","payload","label","length","className","cells","i","push","Cell","onMouseOver","onClick","url","preview_urls","genre","current","pause","play","fill","color","ref","controls","autoPlay","src","ScatterChart","width","height","margin","top","right","bottom","left","CartesianGrid","vertical","horizontal","XAxis","hide","type","dataKey","YAxis","Tooltip","content","Scatter","name","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2hxtHAOe,SAASA,IACtB,IAAMC,EAAcC,mBADsB,EAEEC,mBAAS,GAFX,mBAEnCC,EAFmC,KAEnBC,EAFmB,OAGEF,mBAAS,IAHX,mBAGnCG,EAHmC,KAGnBC,EAHmB,OAIMJ,mBAAS,WAJf,mBAInCK,EAJmC,KAIjBC,EAJiB,OAKEN,mBAAS,IALX,mBAKnCO,EALmC,KAKnBC,EALmB,KAOtCC,GAAY,EACZC,EAAOC,OAAOD,KAAKE,GACnBC,EAAOF,OAAOG,OAAOF,GAEnBG,EAAgB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,QAAqB,EAAZC,MACxC,OAAIF,GAAUC,GAAWA,EAAQE,OAE7B,qBAAKC,UAAU,iBAAf,SACGb,IAIA,MAoBT,IADA,IAAIc,EAAQ,GAtC8B,WAuCjCC,GACPD,EAAME,KACJ,cAACC,EAAA,EAAD,CACEC,YAAa,kBAAMjB,EAAkBE,EAAKY,KAC1CI,QAAS,kBArBKC,EAqBYd,EAAKS,GAAGM,aAAa,GArB5BC,EAqBgCnB,EAAKY,QApBxDnB,IAAc,wCAAsCwB,IAClDlB,EACFX,EAAYgC,QAAQC,QAEpBjC,EAAYgC,QAAQE,OAEtBvB,GAAaA,IAEbL,EAAkB,iCAAD,OAAkCuB,IACnDzB,EAAkBD,EAAiB,GACnCQ,GAAY,EACZH,EAAoBuB,KAZxB,IAAoBF,EAAKE,GAuBnBI,KAAMpB,EAAKS,GAAGY,OAJhB,eAGerB,EAAKS,GAAGO,UALlBP,EAAI,EAAGA,EAAIT,EAAKM,OAAQG,IAAM,EAA9BA,GAWT,OACE,qCACE,sBAAKF,UAAU,eAAf,UACE,sDAAyBf,KACzB,uBACA,uBAAO8B,IAAKrC,EAAkCsC,UAAQ,EAACC,UAAQ,EAA/D,SACE,wBAAQC,IAAKnC,KADeF,MAIhC,cAAC,oBAAD,UACE,eAACsC,EAAA,EAAD,CACEC,MAAO,KACPC,OAAQ,KACRC,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,IAPV,UAUE,cAACC,EAAA,EAAD,CAAeC,UAAU,EAAOC,YAAY,IAC5C,cAACC,EAAA,EAAD,CAAOC,MAAM,EAAMC,KAAK,SAASC,QAAQ,SACzC,cAACC,EAAA,EAAD,CAAOH,MAAM,EAAMC,KAAK,SAASC,QAAQ,QACzC,cAACE,EAAA,EAAD,CAASC,QAAS,cAACzC,EAAD,MAClB,cAAC0C,EAAA,EAAD,CAASC,KAAK,OAAO7C,KAAMA,EAAMoB,KAAK,UAAtC,SACGZ,YC/EE,SAASsC,IACtB,OACE,gCACE,sBAAKvC,UAAU,QAAf,UACE,qBAAKA,UAAU,YAAf,wBACA,qDAEF,cAACvB,EAAD,OCLN+D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACH,EAAD,MAEFI,SAASC,eAAe,W","file":"static/js/main.6fd93fa5.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { ScatterChart, Scatter, Cell, Tooltip, CartesianGrid, XAxis, YAxis } from 'recharts';\nimport { MapInteractionCSS } from 'react-map-interaction';\nimport genre_data from \"./everynoise-scrape.json\"; // last added data-2\n// import genre_data from \"./og-everynoise-scrape\"; // complete\n// import genre_data from \"./test\"\n\nexport default function GenreScatterChart() {\n  const audioPlayer = useRef();\n  const [audioPlayerKey, setAudioPlayerKey] = useState(0);\n  const [audioPlayerUrl, setAudioPlayerUrl] = useState(\"\");\n  const [audioPlayerGenre, setAudioPlayerGenre] = useState(\"Nothing\");\n  const [tooltipContent, setTooltipContent] = useState(\"\");\n\n  let isPlaying = false;\n  let keys = Object.keys(genre_data);\n  let data = Object.values(genre_data);\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"custom-tooltip\">\n          {tooltipContent}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  function togglePlay(url, genre) {\n    if (audioPlayerUrl === `https://p.scdn.co/mp3-preview/${url}`) {\n      if (isPlaying) {\n        audioPlayer.current.pause();\n      } else {\n        audioPlayer.current.play();\n      }\n      isPlaying = !isPlaying;\n    } else {\n      setAudioPlayerUrl(`https://p.scdn.co/mp3-preview/${url}`);\n      setAudioPlayerKey(audioPlayerKey + 1);\n      isPlaying = true;\n      setAudioPlayerGenre(genre);\n    }\n  };\n\n  let cells = [];\n  for (let i = 0; i < data.length; i++) {\n    cells.push(\n      <Cell\n        onMouseOver={() => setTooltipContent(keys[i])} \n        onClick={() => togglePlay(data[i].preview_urls[0], keys[i])}\n        key={`cell-${data[i].genre}`} \n        fill={data[i].color} \n      />\n    )\n  }\n\n  return (\n    <>\n      <div className=\"audio-player\">\n        <div>Currently Playing: {audioPlayerGenre}</div>\n        <br/>\n        <audio ref={audioPlayer} key={audioPlayerKey} controls autoPlay>\n          <source src={audioPlayerUrl} />\n        </audio>\n      </div>\n      <MapInteractionCSS>\n        <ScatterChart\n          width={1600}\n          height={1600}\n          margin={{\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 20,\n          }}\n        >\n          <CartesianGrid vertical={false} horizontal={false} />\n          <XAxis hide={true} type=\"number\" dataKey=\"left\" />\n          <YAxis hide={true} type=\"number\" dataKey=\"top\" />\n          <Tooltip content={<CustomTooltip />} />\n          <Scatter name=\"data\" data={data} fill=\"#8884d8\">\n            {cells}\n          </Scatter>\n        </ScatterChart>\n      </MapInteractionCSS>\n    </>\n  );\n}","import React from \"react\";\nimport GenreScatterChart from './GenreScatterChart';\n\nexport default function App() {\n  return (\n    <div>\n      <div className=\"brand\">\n        <div className=\"app-title\">EverySound</div>\n        <div>by Vincent Tieu</div>\n      </div>\n      <GenreScatterChart />\n    </div>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}