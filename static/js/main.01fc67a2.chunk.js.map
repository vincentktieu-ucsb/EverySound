{"version":3,"sources":["GenreScatterChart.js","App.js","index.js"],"names":["GenreScatterChart","props","audioPlayerUrl","togglePlay","useState","tooltipContent","setTooltipContent","cells","CustomTooltip","active","payload","label","length","className","i","push","Cell","onMouseOver","data","genre","onClick","preview_url","fill","color","stroke","strokeWidth","ScatterChart","width","height","margin","top","right","bottom","left","CartesianGrid","vertical","horizontal","XAxis","hide","type","dataKey","YAxis","Tooltip","content","Scatter","name","App","audioPlayer","useRef","audioPlayerKey","setAudioPlayerKey","setAudioPlayerUrl","isPlaying","setIsPlaying","audioPlayerGenre","setAudioPlayerGenre","url","current","pause","play","AudioPlayer","ref","forwardRef","useEffect","console","log","volume","controls","src","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"037NAce,SAASA,EAAkBC,GAaxC,IAbgD,IACxCC,EAA+BD,EAA/BC,eAAgBC,EAAeF,EAAfE,WADuB,EAEHC,mBAAS,IAFN,mBAExCC,EAFwC,KAExBC,EAFwB,KAI3CC,EAAQ,GAENC,EAAgB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,QAAqB,EAAZC,MACxC,OAAIF,GAAUC,GAAWA,EAAQE,OACxB,qBAAKC,UAAU,iBAAf,SAAiCR,IAEnC,MAVsC,WAatCS,GACPP,EAAMQ,KACJ,cAACC,EAAA,EAAD,CACEC,YAAa,kBAAMX,EAAkBY,EAAKJ,GAAGK,QAC7CC,QAAS,kBAAMjB,EAAWe,EAAKJ,GAAGO,YAAaH,EAAKJ,GAAGK,QAEvDG,KAAMJ,EAAKJ,GAAGS,MACdC,OAAQN,EAAKJ,GAAGS,MAChBE,YACEvB,IAAc,wCACmBgB,EAAKJ,GAAGO,aACrC,GACA,GAVR,eAGeH,EAAKJ,GAAGK,UALlBL,EAAI,EAAGA,EAAII,EAAKN,OAAQE,IAAM,EAA9BA,GAkBT,OACE,cAAC,oBAAD,UACE,eAACY,EAAA,EAAD,CACEC,MAAO,KACPC,OAAQ,KACRC,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,IAPV,UAUE,cAACC,EAAA,EAAD,CAAeC,UAAU,EAAOC,YAAY,IAC5C,cAACC,EAAA,EAAD,CAAOC,MAAM,EAAMC,KAAK,SAASC,QAAQ,SACzC,cAACC,EAAA,EAAD,CAAOH,MAAM,EAAMC,KAAK,SAASC,QAAQ,QACzC,cAACE,EAAA,EAAD,CAASC,QAAS,cAACnC,EAAD,MAClB,cAACoC,EAAA,EAAD,CAASC,KAAK,OAAO3B,KAAMA,EAAMI,KAAK,UAAtC,SACGf,SC3DI,SAASuC,IACtB,IAAMC,EAAcC,mBADQ,EAEgB5C,mBAAS,GAFzB,mBAErB6C,EAFqB,KAELC,EAFK,OAGgB9C,mBAAS,IAHzB,mBAGrBF,EAHqB,KAGLiD,EAHK,OAIM/C,oBAAS,GAJf,mBAIrBgD,EAJqB,KAIVC,EAJU,OAKoBjD,mBAAS,IAL7B,mBAKrBkD,EALqB,KAKHC,EALG,KAuB5B,OACE,gCACE,sBAAK1C,UAAU,QAAf,UACE,qBAAKA,UAAU,YAAf,sBACA,qDAEF,cAACb,EAAD,CACEE,eAAgBA,EAChBC,WAxBN,SAAoBqD,EAAKrC,GACnBjB,IAAc,wCAAsCsD,IAClDJ,EACFL,EAAYU,QAAQC,QAEpBX,EAAYU,QAAQE,OAEtBN,GAAcD,KAEdD,EAAkB,iCAAD,OAAkCK,IACnDN,EAAkBD,EAAiB,GACnCI,GAAa,GACbE,EAAoBpC,OAcpB,qBAAKN,UAAU,eAAf,SACwB,KAArByC,EACC,cAACM,EAAD,CACEC,IAAKd,EACLE,eAAgBA,EAChBK,iBAAkBA,EAClBpD,eAAgBA,IAGlB,6EAOV,IAAM0D,EAAcE,sBAAW,SAAC7D,EAAO4D,GAAS,IACtCZ,EAAqDhD,EAArDgD,eAAgBK,EAAqCrD,EAArCqD,iBAAkBpD,EAAmBD,EAAnBC,eAS1C,OARA6D,qBAAU,WACJF,IACFG,QAAQC,IAAR,iBAAsBX,IACtBO,EAAIJ,QAAQE,OACZE,EAAIJ,QAAQS,OAAS,OAEtB,CAACL,EAAKP,IAGP,gCACE,kDAAqBA,KACrB,uBACA,uBAAOO,IAAKA,EAA0BM,UAAQ,EAA9C,SACE,wBAAQC,IAAKlE,KADO+C,SC7D5BoB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACzB,EAAD,MAEF0B,SAASC,eAAe,W","file":"static/js/main.01fc67a2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  ScatterChart,\n  Scatter,\n  Cell,\n  Tooltip,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { MapInteractionCSS } from \"react-map-interaction\";\nimport data from \"./scrapes/db.json\"; // last added data-2\n// import genre_data from \"./scrapes/og-everynoise\"; // complete\n\nexport default function GenreScatterChart(props) {\n  const { audioPlayerUrl, togglePlay } = props;\n  const [tooltipContent, setTooltipContent] = useState(\"\");\n\n  let cells = [];\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return <div className=\"custom-tooltip\">{tooltipContent}</div>;\n    }\n    return null;\n  };\n\n  for (let i = 0; i < data.length; i++) {\n    cells.push(\n      <Cell\n        onMouseOver={() => setTooltipContent(data[i].genre)}\n        onClick={() => togglePlay(data[i].preview_url, data[i].genre)}\n        key={`cell-${data[i].genre}`}\n        fill={data[i].color}\n        stroke={data[i].color}\n        strokeWidth={\n          audioPlayerUrl ===\n          `https://p.scdn.co/mp3-preview/${data[i].preview_url}`\n            ? 25\n            : 0\n        }\n      />\n    );\n  }\n\n  return (\n    <MapInteractionCSS>\n      <ScatterChart\n        width={2400}\n        height={2400}\n        margin={{\n          top: 20,\n          right: 20,\n          bottom: 20,\n          left: 20,\n        }}\n      >\n        <CartesianGrid vertical={false} horizontal={false} />\n        <XAxis hide={true} type=\"number\" dataKey=\"left\" />\n        <YAxis hide={true} type=\"number\" dataKey=\"top\" />\n        <Tooltip content={<CustomTooltip />} />\n        <Scatter name=\"data\" data={data} fill=\"#8884d8\">\n          {cells}\n        </Scatter>\n      </ScatterChart>\n    </MapInteractionCSS>\n  );\n}\n","import React, { useState, useEffect, useRef, forwardRef } from \"react\";\nimport GenreScatterChart from \"./GenreScatterChart\";\n\nexport default function App() {\n  const audioPlayer = useRef();\n  const [audioPlayerKey, setAudioPlayerKey] = useState(0);\n  const [audioPlayerUrl, setAudioPlayerUrl] = useState(\"\");\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [audioPlayerGenre, setAudioPlayerGenre] = useState(\"\");\n\n  function togglePlay(url, genre) {\n    if (audioPlayerUrl === `https://p.scdn.co/mp3-preview/${url}`) {\n      if (isPlaying) {\n        audioPlayer.current.pause();\n      } else {\n        audioPlayer.current.play();\n      }\n      setIsPlaying(!isPlaying);\n    } else {\n      setAudioPlayerUrl(`https://p.scdn.co/mp3-preview/${url}`);\n      setAudioPlayerKey(audioPlayerKey + 1);\n      setIsPlaying(true);\n      setAudioPlayerGenre(genre);\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"brand\">\n        <div className=\"app-title\">MusicMap</div>\n        <div>by Vincent Tieu</div>\n      </div>\n      <GenreScatterChart\n        audioPlayerUrl={audioPlayerUrl}\n        togglePlay={togglePlay}\n      />\n      <div className=\"audio-player\">\n        {audioPlayerGenre !== \"\" ? (\n          <AudioPlayer\n            ref={audioPlayer}\n            audioPlayerKey={audioPlayerKey}\n            audioPlayerGenre={audioPlayerGenre}\n            audioPlayerUrl={audioPlayerUrl}\n          />\n        ) : (\n          <div>Drag to Navigate and Click to Listen!</div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst AudioPlayer = forwardRef((props, ref) => {\n  const { audioPlayerKey, audioPlayerGenre, audioPlayerUrl } = props;\n  useEffect(() => {\n    if (ref) {\n      console.log(`genre: ${audioPlayerGenre}`);\n      ref.current.play();\n      ref.current.volume = 0.15;\n    }\n  }, [ref, audioPlayerGenre]);\n\n  return (\n    <div>\n      <div>Genre Playing: {audioPlayerGenre}</div>\n      <br />\n      <audio ref={ref} key={audioPlayerKey} controls>\n        <source src={audioPlayerUrl} />\n      </audio>\n    </div>\n  );\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}